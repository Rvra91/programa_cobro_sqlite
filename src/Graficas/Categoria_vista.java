/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graficas;

import Conexion_BD.Conexion;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JComboBox;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;

import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;

import javax.swing.text.PlainDocument;

/**
 *
 * @author Ramon
 */
public class Categoria_vista extends javax.swing.JPanel {

    public Categoria_vista() {
        initComponents();
        ciudadAbono();
        mesciudad.setDate(new Date());

        fechaElec.setDate(new Date());
        Menu frame = (Menu) SwingUtilities.getWindowAncestor(this);
        this.contarEstado();
        this.Cartera();
        fechaHoy(fechaHoy);
        this.setSize(new Dimension(1300, 800));
        model = (DefaultTableModel) tabla_categoria.getModel();
        this.CargarCiudad();
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Ciudad");
        model.addColumn("NÃºmero de clientes");
        cargarMeses();
        
       /* limitarCaracteres(txtabonado,3);
                limitarCaracteres(txtganancia,3);
        limitarCaracteres(txtperdida,3);*/
        limitarCaracteres(txtMesabono,3);
        limitarCaracteres(txtgananciames,3);
        limitarCaracteres(txtperdidames,3);
      /*  limitarCaracteres(ciudadAbono,3);
        limitarCaracteres(CiudadGanancia,3);
        limitarCaracteres(CiudadPerdida,3);*/
        limitarCaracteres(cabonomes,3);
        limitarCaracteres(cgananciames,3);
        limitarCaracteres(cperdidames,3);

        
        
        
        
        obtenerAbonoPorFecha();

    }
    DefaultTableModel model;
    Connection connect;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jDayChooser1 = new com.toedter.calendar.JDayChooser();
        jLocaleChooser1 = new com.toedter.components.JLocaleChooser();
        jPanel1 = new javax.swing.JPanel();
        agregar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_ciudad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_categoria = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        Deudores = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        paz_salvo = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtabonado = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtganancia = new javax.swing.JTextField();
        fechaHoy = new javax.swing.JLabel();
        txtMesabono = new javax.swing.JTextField();
        txtperdidames = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        fechaElec = new com.toedter.calendar.JDateChooser();
        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtperdida = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtgananciames = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        Eliminar1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ganancia = new javax.swing.JPanel();
        ciudadLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        gananciahoy = new javax.swing.JLabel();
        ciudadAbono = new javax.swing.JTextField();
        GANADO = new javax.swing.JLabel();
        CiudadGanancia = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        mesciudad = new com.toedter.calendar.JDateChooser();
        cperdidames = new javax.swing.JTextField();
        cabonomes = new javax.swing.JTextField();
        cgananciames = new javax.swing.JTextField();
        GANADO1 = new javax.swing.JLabel();
        CiudadPerdida = new javax.swing.JTextField();
        GANADO2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel16.setText("jLabel16");

        setPreferredSize(new java.awt.Dimension(1300, 700));

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1300, 700));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        agregar.setBackground(new java.awt.Color(0, 255, 0));
        agregar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        agregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        agregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agregarMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("AGREGAR");

        javax.swing.GroupLayout agregarLayout = new javax.swing.GroupLayout(agregar);
        agregar.setLayout(agregarLayout);
        agregarLayout.setHorizontalGroup(
            agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agregarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        agregarLayout.setVerticalGroup(
            agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 470, -1, 30));
        jPanel1.add(txt_ciudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 430, 170, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Ciudad:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 430, -1, -1));

        tabla_categoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CIUDADES", "NUMERO DE CLIENTES", "Paz y salvo", "Clavos", "Cartera", "Dinero Clavo", "Dinero Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_categoria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_categoriaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_categoria);
        if (tabla_categoria.getColumnModel().getColumnCount() > 0) {
            tabla_categoria.getColumnModel().getColumn(1).setMinWidth(200);
            tabla_categoria.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabla_categoria.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 690, -1));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Deudores.setBackground(new java.awt.Color(255, 0, 0));
        Deudores.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Deudores.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Deudores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeudoresMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CLAVOS");

        javax.swing.GroupLayout DeudoresLayout = new javax.swing.GroupLayout(Deudores);
        Deudores.setLayout(DeudoresLayout);
        DeudoresLayout.setHorizontalGroup(
            DeudoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DeudoresLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        DeudoresLayout.setVerticalGroup(
            DeudoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DeudoresLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.add(Deudores, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 26, -1, -1));

        paz_salvo.setBackground(new java.awt.Color(51, 230, 18));
        paz_salvo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paz_salvo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        paz_salvo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paz_salvoMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("PAZ Y SALVO");

        javax.swing.GroupLayout paz_salvoLayout = new javax.swing.GroupLayout(paz_salvo);
        paz_salvo.setLayout(paz_salvoLayout);
        paz_salvoLayout.setHorizontalGroup(
            paz_salvoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paz_salvoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paz_salvoLayout.setVerticalGroup(
            paz_salvoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paz_salvoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.add(paz_salvo, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 78, 136, -1));
        jPanel2.add(txtabonado, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 163, 86, -1));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("PERDIDA DE HOY");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 290, -1, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("ABONADO HOY");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 141, 86, -1));

        txtganancia.setForeground(new java.awt.Color(51, 255, 51));
        jPanel2.add(txtganancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 227, 86, -1));

        fechaHoy.setForeground(new java.awt.Color(255, 255, 255));
        fechaHoy.setText("DD/MM/YYYY");
        jPanel2.add(fechaHoy, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, -1, -1));
        jPanel2.add(txtMesabono, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 460, 80, -1));

        txtperdidames.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(txtperdidames, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 590, 70, -1));

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("PERDIDA");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 560, -1, 20));

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("ABONADO");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 430, -1, -1));

        jButton4.setText("Ok");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 710, 59, -1));

        fechaElec.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaElecPropertyChange(evt);
            }
        });
        jPanel2.add(fechaElec, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, -1, -1));
        jPanel2.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 80, -1));
        jPanel2.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 670, 70, -1));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("GANANCIA");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 500, -1, -1));

        txtperdida.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(txtperdida, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, 90, -1));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("GANANCIA HOY");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 205, -1, -1));

        txtgananciames.setForeground(new java.awt.Color(0, 255, 0));
        jPanel2.add(txtgananciames, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 530, 70, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 910));

        jButton3.setText("INFO");
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 90, 40));

        Eliminar1.setBackground(new java.awt.Color(255, 0, 0));
        Eliminar1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        Eliminar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Eliminar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Eliminar1MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("ELIMINAR");

        javax.swing.GroupLayout Eliminar1Layout = new javax.swing.GroupLayout(Eliminar1);
        Eliminar1.setLayout(Eliminar1Layout);
        Eliminar1Layout.setHorizontalGroup(
            Eliminar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Eliminar1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Eliminar1Layout.setVerticalGroup(
            Eliminar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Eliminar1Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );

        jPanel1.add(Eliminar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 470, -1, 30));

        ganancia.setBackground(new java.awt.Color(255, 255, 255));
        ganancia.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ciudadLabel.setFont(new java.awt.Font("Roboto", 2, 14)); // NOI18N
        ciudadLabel.setForeground(new java.awt.Color(0, 0, 0));
        ciudadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ciudadLabel.setText(".");
        ganancia.add(ciudadLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 31, -1, 16));

        jButton1.setText("VER MAS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        ganancia.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 550, 90, 40));

        gananciahoy.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        gananciahoy.setForeground(new java.awt.Color(0, 0, 0));
        gananciahoy.setText("GANANCIA HOY");
        ganancia.add(gananciahoy, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 86, -1));
        ganancia.add(ciudadAbono, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 200, 60));

        GANADO.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        GANADO.setForeground(new java.awt.Color(0, 0, 0));
        GANADO.setText("PERDIDA DE HOY");
        ganancia.add(GANADO, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 110, 20));

        CiudadGanancia.setForeground(new java.awt.Color(0, 204, 0));
        ganancia.add(CiudadGanancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 200, 60));

        jLabel15.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("ABONADO HOY");
        ganancia.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 110, -1));

        jLabel17.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("ABONADO");
        ganancia.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, -1, 30));

        mesciudad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mesciudadMouseClicked(evt);
            }
        });
        mesciudad.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mesciudadPropertyChange(evt);
            }
        });
        ganancia.add(mesciudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, -1, -1));
        ganancia.add(cperdidames, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 750, 200, 60));
        ganancia.add(cabonomes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 200, 60));

        cgananciames.setForeground(new java.awt.Color(51, 204, 0));
        ganancia.add(cgananciames, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 200, 60));

        GANADO1.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        GANADO1.setForeground(new java.awt.Color(0, 0, 0));
        GANADO1.setText("GANANCIA");
        ganancia.add(GANADO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 590, 70, -1));

        CiudadPerdida.setForeground(new java.awt.Color(204, 0, 0));
        CiudadPerdida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiudadPerdidaActionPerformed(evt);
            }
        });
        ganancia.add(CiudadPerdida, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 200, 60));

        GANADO2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        GANADO2.setForeground(new java.awt.Color(0, 0, 0));
        GANADO2.setText("PERDIDA");
        ganancia.add(GANADO2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 710, 100, 20));

        jPanel1.add(ganancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 0, 670, 1120));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/âPngtreeâblue modern city skyline business_1296687.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-350, -410, -1, 1530));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Ciudad:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 430, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel13.setText("EN TODO EL MES DE /MM\\ SE ABONO 9999 Y HUBO 9999 EN GANANCIAS");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jButton2.setText("INFO");
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 430, 90, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1120, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarMouseClicked
        this.guardarCiudad();
        this.actualizarTabla();
    }//GEN-LAST:event_agregarMouseClicked

    private void Eliminar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Eliminar1MouseClicked

        int respuesta = JOptionPane.showConfirmDialog(null, "Â¿Seguro que quieres eliminar la ciudad?", "Confirmar eliminaciÃ³n", JOptionPane.YES_NO_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            this.eliminarCiudad();

        } else {
            // No hacer nada
        }
        this.actualizarTabla();

    }//GEN-LAST:event_Eliminar1MouseClicked

    private void DeudoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeudoresMouseClicked
        Clavos2 d1 = new Clavos2();
        d1.setVisible(true);
    }//GEN-LAST:event_DeudoresMouseClicked

    private void paz_salvoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paz_salvoMouseClicked
        Paz p1 = new Paz();
      p1.setVisible(true);
    }//GEN-LAST:event_paz_salvoMouseClicked

    private void tabla_categoriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_categoriaMouseClicked

        int filaSeleccionada = tabla_categoria.getSelectedRow();
        if (filaSeleccionada != -1) {

            String idClientes = tabla_categoria.getValueAt(filaSeleccionada, 0).toString();

            txt_ciudad.setText(idClientes);
            ciudadLabel.setText(idClientes);
ciudadAbono();
ciudadAbonoMes();
        }


    }//GEN-LAST:event_tabla_categoriaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        grafica grafica = new grafica();
        grafica.setVisible(true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void fechaElecPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaElecPropertyChange
        obtenerAbonoPorFecha();        // TODO add your handling code here:
    }//GEN-LAST:event_fechaElecPropertyChange

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        obtenerAbonoPorFecha();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void mesciudadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mesciudadMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mesciudadMouseClicked

    private void mesciudadPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mesciudadPropertyChange
        ciudadAbonoMes();
    }//GEN-LAST:event_mesciudadPropertyChange

    private void CiudadPerdidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiudadPerdidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CiudadPerdidaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CiudadGanancia;
    private javax.swing.JTextField CiudadPerdida;
    private javax.swing.JPanel Deudores;
    private javax.swing.JPanel Eliminar1;
    private javax.swing.JLabel GANADO;
    private javax.swing.JLabel GANADO1;
    private javax.swing.JLabel GANADO2;
    private javax.swing.JPanel agregar;
    private javax.swing.JTextField cabonomes;
    private javax.swing.JTextField cgananciames;
    private javax.swing.JTextField ciudadAbono;
    private javax.swing.JLabel ciudadLabel;
    private javax.swing.JTextField cperdidames;
    private com.toedter.calendar.JDateChooser fechaElec;
    private javax.swing.JLabel fechaHoy;
    private javax.swing.JPanel ganancia;
    private javax.swing.JLabel gananciahoy;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDayChooser jDayChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.components.JLocaleChooser jLocaleChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private com.toedter.calendar.JDateChooser mesciudad;
    private javax.swing.JPanel paz_salvo;
    private javax.swing.JTable tabla_categoria;
    private javax.swing.JTextField txtMesabono;
    private javax.swing.JTextField txt_ciudad;
    private javax.swing.JTextField txtabonado;
    private javax.swing.JTextField txtganancia;
    private javax.swing.JTextField txtgananciames;
    private javax.swing.JTextField txtperdida;
    private javax.swing.JTextField txtperdidames;
    // End of variables declaration//GEN-END:variables
private void CargarCiudad() {
        try {
            Connection cn = Conexion.conectar();

            String consulta = "SELECT DISTINCT c.ciudad, c.numClientes, t.total_paz, t.total_clavos, t.cartera, t.dinero_clavo, t.dinero_total "
                    + "FROM (SELECT categoria.ciudad, COUNT(clientes.idClientes) AS numClientes "
                    + "      FROM categoria "
                    + "      LEFT JOIN clientes ON categoria.idCategoria = clientes.idCategorias "
                    + "      GROUP BY categoria.ciudad) c "
                    + "JOIN categoria t ON c.ciudad = t.ciudad";

            PreparedStatement ps = cn.prepareStatement(consulta);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Object[] fila = new Object[7];
                fila[0] = rs.getString("ciudad");
                fila[1] = rs.getInt("numClientes");
                fila[2] = rs.getInt("total_paz");
                fila[3] = rs.getInt("total_clavos");
                fila[4] = rs.getInt("cartera");
                fila[5] = rs.getInt("dinero_clavo");
                fila[6] = rs.getInt("dinero_total");

                model.addRow(fila);
            }

            rs.close();
            ps.close();
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void guardarCiudad() {
        String ciudad = txt_ciudad.getText();

        try {
            Connection conexion = Conexion.conectar();
            PreparedStatement consulta = conexion.prepareStatement("SELECT ciudad FROM categoria WHERE ciudad = ?");
            consulta.setString(1, ciudad);
            ResultSet resultado = consulta.executeQuery();

            // Si ya existe una ciudad con el mismo nombre, mostrar mensaje de error y salir del mÃ©todo
            if (resultado.next()) {
                JOptionPane.showMessageDialog(null, "Ya existe esa ciudad.", "Error", JOptionPane.ERROR_MESSAGE);
                conexion.close();

                return;

            }

            // Si no existe una ciudad con el mismo nombre, insertar la nueva ciudad en la base de datos
            consulta = conexion.prepareStatement("INSERT INTO categoria (ciudad) VALUES (?)");
            consulta.setString(1, ciudad);
            consulta.executeUpdate();
            consulta.close();

            JOptionPane.showMessageDialog(null, "Ciudad agregada correctamente.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            conexion.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void eliminarCiudad() {
        String ciudad = txt_ciudad.getText();
        try {
            Connection conexion = Conexion.conectar();
            String consulta = "DELETE FROM categoria WHERE ciudad = ?";
            PreparedStatement ps = conexion.prepareStatement(consulta);
            ps.setString(1, ciudad);
            ps.executeUpdate();
            ps.close();
            conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void cambiarAotroPanel(JPanel nuevoPanel) {
        // Obtener la referencia al JFrame principal
        Menu frame = (Menu) SwingUtilities.getWindowAncestor(this);
        // Llamar al mÃ©todo cambiarContenido() del JFrame principal
        frame.cambiarContenido(nuevoPanel);
    }

    private void actualizarTabla() {
        // Eliminar todos los registros de la tabla

        DefaultTableModel model = (DefaultTableModel) tabla_categoria.getModel();
        model.setRowCount(0);

        // Cargar los datos desde la base de datos en el modelo de tabla
        CargarCiudad();

        // Actualizar la tabla
        tabla_categoria.setModel(model);
    }

    private void contarEstado() {
        try {
            Connection cn = Conexion.conectar();

            // Obtener las ciudades existentes en la tabla "categoria"
            PreparedStatement consultaCiudades = cn.prepareStatement("SELECT ciudad FROM categoria");
            ResultSet rsCiudades = consultaCiudades.executeQuery();

            while (rsCiudades.next()) {
                String ciudad = rsCiudades.getString("ciudad");

                // Obtener los clientes que deben dinero en la ciudad actual
                PreparedStatement consultaPaz2 = cn.prepareStatement("SELECT * FROM clientes WHERE estado = ? AND idcategorias IN (SELECT idcategoria FROM categoria WHERE ciudad = ?)");
                PreparedStatement consultaClavos2 = cn.prepareStatement("SELECT * FROM clientes WHERE estado = ? AND idcategorias IN (SELECT idcategoria FROM categoria WHERE ciudad = ?)");
                consultaPaz2.setInt(1, 1);
                consultaPaz2.setString(2, ciudad);
                consultaClavos2.setInt(1, 2);
                consultaClavos2.setString(2, ciudad);
                ResultSet rsClientesPaz = consultaPaz2.executeQuery();
                ResultSet rsClientesDeudores = consultaClavos2.executeQuery();

                int cantidadPaz = 0;
                int cantidadDeudores = 0;

                // Contar la cantidad de clientes en estado de paz
                while (rsClientesPaz.next()) {
                    cantidadPaz++;
                }

                // Contar la cantidad de clientes deudores
                while (rsClientesDeudores.next()) {
                    cantidadDeudores++;
                }

                // Actualizar la tabla "categoria" con la cantidad de deudores y paz para la ciudad actual
                PreparedStatement consultaClavos = cn.prepareStatement("UPDATE categoria SET total_clavos = ?, total_paz = ? WHERE ciudad = ?");
                consultaClavos.setInt(1, cantidadDeudores);
                consultaClavos.setInt(2, cantidadPaz);
                consultaClavos.setString(3, ciudad);
                consultaClavos.executeUpdate();

                System.out.println("Cantidad de paz para " + ciudad + ": " + cantidadPaz);
                System.out.println("Cantidad de deudores para " + ciudad + ": " + cantidadDeudores);
            }

            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al obtener los clientes deudores: " + e);
            JOptionPane.showMessageDialog(null, "Error al obtener los clientes deudores.");
        }
    }

    public void cargarDeudos(int estado1, JComboBox combo, JTable tabla) {
        int estado = estado1;
        try {
            Connection conexion = Conexion.conectar();
            String ciudadSeleccionada = combo.getSelectedItem().toString();
            String consulta = "SELECT ciudad, total_clavos, total_paz,cartera, dinero_clavo, dinero_total "
                    + "FROM categoria";
            PreparedStatement ps = conexion.prepareStatement(consulta);
            ps.setString(1, ciudadSeleccionada);
            ps.setInt(2, estado);

            ResultSet rs = ps.executeQuery();

            // Limpiar la tabla antes de cargar los nuevos datos
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                Object[] fila = new Object[7];
                fila[0] = rs.getInt("ciudad");
                fila[1] = rs.getString("total_clavos");
                fila[2] = rs.getString("total_paz");
                fila[3] = rs.getInt("cartera");
                fila[4] = rs.getInt("dinero_clavo");
                fila[5] = rs.getInt("dinero_total");

                model.addRow(fila);
            }

            rs.close();
            ps.close();
            conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void Cartera() {
        try {
            Connection cn = Conexion.conectar();

            // Actualizar columna "cartera"
            PreparedStatement psUpdateCartera = cn.prepareStatement(
                    "UPDATE categoria SET cartera = (SELECT SUM(ha.monto) FROM historial_abonos ha JOIN clientes c ON ha.idclientes = c.idclientes WHERE c.idcategorias = categoria.idcategoria) WHERE 1 = 1"
            );
            psUpdateCartera.executeUpdate();

            // Actualizar columna "dinero_clavo"
            PreparedStatement psUpdateClavo = cn.prepareStatement(
                    "UPDATE categoria SET dinero_clavo = (SELECT SUM(c.prestamo_restante) FROM clientes c WHERE c.estado=2 AND c.idcategorias = categoria.idcategoria) WHERE 1 = 1"
            );
            psUpdateClavo.executeUpdate();

            // Actualizar columna "dinero_total"
            PreparedStatement psUpdateTotal = cn.prepareStatement(
                    "UPDATE categoria \n"
                    + "SET dinero_total = (\n"
                    + "  SELECT ABS(SUM(prestamo) - SUM(prestamo_interes))\n"
                    + "  FROM clientes \n"
                    + "  WHERE idcategorias = categoria.idcategoria\n"
                    + ")\n"
                    + "WHERE 1 = 1;"
            );
            psUpdateTotal.executeUpdate();

            System.out.println("ActualizaciÃ³n de cartera por ciudad completada");

            psUpdateCartera.close();
            psUpdateClavo.close();
            psUpdateTotal.close();
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al realizar la actualizaciÃ³n: " + e.getMessage());
        }
    }

    public static void fechaHoy(JLabel label) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String fechaActual = sdf.format(new Date());
        label.setText(fechaActual);
    }

    private void cargarMeses() {
        try {
            Connection cn = Conexion.conectar();

            // Obtener la fecha actual en milisegundos
            long inicioDia = LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();
            long finDia = inicioDia + 24 * 60 * 60 * 1000;

            // Consulta para cargar los datos de hoy
            String query = "SELECT SUM(monto) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ?";
            String query2 = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND ganancia >= 0";
            String query3 = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND ganancia <= 0";

            PreparedStatement psCargarDatos = cn.prepareStatement(query);
            PreparedStatement psCargarDatos2 = cn.prepareStatement(query2);

            PreparedStatement psCargarDatos3 = cn.prepareStatement(query3);
            psCargarDatos.setLong(1, inicioDia);
            psCargarDatos.setLong(2, finDia);
            psCargarDatos2.setLong(1, inicioDia);
            psCargarDatos2.setLong(2, finDia);
            psCargarDatos3.setLong(1, inicioDia);
            psCargarDatos3.setLong(2, finDia);
            ResultSet rs = psCargarDatos.executeQuery();
            ResultSet rs2 = psCargarDatos2.executeQuery();
            ResultSet rs3 = psCargarDatos3.executeQuery();

            // Procesar los resultados
            while (rs.next()) {
                double montoTotal = rs.getDouble("total");
                txtabonado.setText(String.valueOf(montoTotal));
            }

            while (rs2.next()) {
                double gananciaTotal = rs2.getDouble("total");
                txtganancia.setText(String.valueOf(gananciaTotal));
            }
            while (rs3.next()) {
                double gananciaTotal = rs3.getDouble("total");
                txtperdida.setText(String.valueOf(gananciaTotal));
            }

            rs.close();
            rs2.close();
            psCargarDatos.close();
            psCargarDatos2.close();
            rs3.close();
            psCargarDatos3.close();
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void obtenerAbonoPorFecha() {

// Establecer la fecha actual como valor inicial
        try {
            Connection cn = Conexion.conectar();

            // Obtener la fecha seleccionada del JDateChooser
            Date fechaSeleccionada = fechaElec.getDate();

            // Obtener los milisegundos de la fecha seleccionada
            long inicioDia = fechaSeleccionada.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();
            long finDia = inicioDia + 24 * 60 * 60 * 1000;

            // Consulta para cargar los datos de la fecha seleccionada
            String query = "SELECT SUM(monto) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ?";
            String query2 = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND ganancia >= 0";
            String query3 = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND ganancia <= 0";

            PreparedStatement psCargarDatos = cn.prepareStatement(query);
            PreparedStatement psCargarDatos2 = cn.prepareStatement(query2);

            PreparedStatement psCargarDatos3 = cn.prepareStatement(query3);
            psCargarDatos.setLong(1, inicioDia);
            psCargarDatos.setLong(2, finDia);
            psCargarDatos2.setLong(1, inicioDia);
            psCargarDatos2.setLong(2, finDia);
            psCargarDatos3.setLong(1, inicioDia);
            psCargarDatos3.setLong(2, finDia);
            ResultSet rs = psCargarDatos.executeQuery();
            ResultSet rs2 = psCargarDatos2.executeQuery();
            ResultSet rs3 = psCargarDatos3.executeQuery();

            // Procesar los resultados
            while (rs.next()) {
                double montoTotal = rs.getDouble("total");
                txtMesabono.setText(String.valueOf(montoTotal));
            }

            while (rs2.next()) {
                double gananciaTotal = rs2.getDouble("total");
                txtgananciames.setText(String.valueOf(gananciaTotal));
            }
            while (rs3.next()) {
                double gananciaTotal = rs3.getDouble("total");
                txtperdidames.setText(String.valueOf(gananciaTotal));
            }

            rs.close();
            rs2.close();
            psCargarDatos.close();
            psCargarDatos2.close();
            rs3.close();
            psCargarDatos3.close();
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        
        }

    }
    
    private void ciudadAbono() {
    try {
        Connection cn = Conexion.conectar();

        // Obtener la fecha actual en milisegundos
        long inicioDia = LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();
        long finDia = inicioDia + 24 * 60 * 60 * 1000;

        String texto = ciudadLabel.getText();
        System.out.println("El texto del JLabel es: " + texto);

        // Obtener el ID de la categorÃ­a de la ciudad
        String queryIdCategoria = "SELECT idcategoria FROM categoria WHERE ciudad = ?";
        PreparedStatement psIdCategoria = cn.prepareStatement(queryIdCategoria);
        psIdCategoria.setString(1, texto);
        ResultSet rsIdCategoria = psIdCategoria.executeQuery();
        int id_categoria = 0;
        if (rsIdCategoria.next()) {
            id_categoria = rsIdCategoria.getInt("idcategoria");
            System.out.println(id_categoria);
        }
        
        rsIdCategoria.close();
        psIdCategoria.close();
        System.out.println(id_categoria);
        // Consultas para cargar los datos de hoy por categorÃ­a
        String queryAbonado = "SELECT SUM(monto) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ?";
        String queryGanancia = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ? AND ganancia >= 0";
        String queryPerdida = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ? AND ganancia < 0";

        PreparedStatement psCargarAbonado = cn.prepareStatement(queryAbonado);
        psCargarAbonado.setLong(1, inicioDia);
        psCargarAbonado.setLong(2, finDia);
        psCargarAbonado.setInt(3, id_categoria);
        System.out.println(id_categoria);
        PreparedStatement psCargarGanancia = cn.prepareStatement(queryGanancia);
        psCargarGanancia.setLong(1, inicioDia);
        psCargarGanancia.setLong(2, finDia);
        psCargarGanancia.setInt(3, id_categoria);

        PreparedStatement psCargarPerdida = cn.prepareStatement(queryPerdida);
        psCargarPerdida.setLong(1, inicioDia);
        psCargarPerdida.setLong(2, finDia);
        psCargarPerdida.setInt(3, id_categoria);

        ResultSet rsAbonado = psCargarAbonado.executeQuery();
        ResultSet rsGanancia = psCargarGanancia.executeQuery();
        ResultSet rsPerdida = psCargarPerdida.executeQuery();

        // Procesar los resultados
        while (rsAbonado.next()) {
            double montoAbonado = rsAbonado.getDouble("total");
            ciudadAbono.setText(String.valueOf(montoAbonado));
        }

        while (rsGanancia.next()) {
            double montoGanancia = rsGanancia.getDouble("total");
            CiudadGanancia.setText(String.valueOf(montoGanancia));
        }

        while (rsPerdida.next()) {
            double montoPerdida = rsPerdida.getDouble("total");
            CiudadPerdida.setText(String.valueOf(montoPerdida));
            
            System.out.println(montoPerdida);
        }

        rsAbonado.close();
        rsGanancia.close();
        rsPerdida.close();
        psCargarAbonado.close();
        psCargarGanancia.close();
        psCargarPerdida.close();
        cn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }
     private void ciudadAbonoMes() {
    try {
        Connection cn = Conexion.conectar();

        // Obtener la fecha actual en milisegundos
       Date fechaSeleccionada = mesciudad.getDate();

            // Obtener los milisegundos de la fecha seleccionada
            long inicioDia = fechaSeleccionada.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();
long finDia = inicioDia + 24 * 60 * 60 * 1000;

String texto = ciudadLabel.getText();
        System.out.println("El texto del JLabel es: " + texto);

        // Obtener el ID de la categorÃ­a de la ciudad
        String queryIdCategoria = "SELECT idcategoria FROM categoria WHERE ciudad = ?";
        PreparedStatement psIdCategoria = cn.prepareStatement(queryIdCategoria);
        psIdCategoria.setString(1, texto);
        ResultSet rsIdCategoria = psIdCategoria.executeQuery();
        int id_categoria = 0;
        if (rsIdCategoria.next()) {
            id_categoria = rsIdCategoria.getInt("idcategoria");
            System.out.println(id_categoria);
        }
        
        rsIdCategoria.close();
        psIdCategoria.close();
        System.out.println(id_categoria);
        // Consultas para cargar los datos de hoy por categorÃ­a
        String queryAbonado = "SELECT SUM(monto) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ?";
        String queryGanancia = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ? AND ganancia >= 0";
        String queryPerdida = "SELECT SUM(ganancia) AS total FROM historial_abonos WHERE fecha >= ? AND fecha < ? AND idcategoria = ? AND ganancia < 0";

        PreparedStatement psCargarAbonado = cn.prepareStatement(queryAbonado);
        psCargarAbonado.setLong(1, inicioDia);
        psCargarAbonado.setLong(2, finDia);
        psCargarAbonado.setInt(3, id_categoria);
        System.out.println(id_categoria);
        PreparedStatement psCargarGanancia = cn.prepareStatement(queryGanancia);
        psCargarGanancia.setLong(1, inicioDia);
        psCargarGanancia.setLong(2, finDia);
        psCargarGanancia.setInt(3, id_categoria);

        PreparedStatement psCargarPerdida = cn.prepareStatement(queryPerdida);
        psCargarPerdida.setLong(1, inicioDia);
        psCargarPerdida.setLong(2, finDia);
        psCargarPerdida.setInt(3, id_categoria);

        ResultSet rsAbonado = psCargarAbonado.executeQuery();
        ResultSet rsGanancia = psCargarGanancia.executeQuery();
        ResultSet rsPerdida = psCargarPerdida.executeQuery();

        // Procesar los resultados
        while (rsAbonado.next()) {
            double montoAbonado = rsAbonado.getDouble("total");
            cabonomes.setText(String.valueOf(montoAbonado));
        }

        while (rsGanancia.next()) {
            double montoGanancia = rsGanancia.getDouble("total");
            cgananciames.setText(String.valueOf(montoGanancia));
        }

        while (rsPerdida.next()) {
            double montoPerdida = rsPerdida.getDouble("total");
            cperdidames.setText(String.valueOf(montoPerdida));
            
            System.out.println(montoPerdida);
        }

        rsAbonado.close();
        rsGanancia.close();
        rsPerdida.close();
        psCargarAbonado.close();
        psCargarGanancia.close();
        psCargarPerdida.close();
        cn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    public void limitarCaracteres(JTextField textField, int limite) {
        textField.setDocument(new PlainDocument() {
            public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
                if (str == null)
                    return;

                String textoActual = textField.getText();
                int longitudTextoActual = textoActual.length();
                int longitudInsercion = str.length();
                int nuevaLongitud = longitudTextoActual + longitudInsercion;

                if (nuevaLongitud <= limite) {
                    super.insertString(offset, str, attr);
                } else {
                    int caracteresRestantes = limite - longitudTextoActual;
                    String strCortado = str.substring(0, caracteresRestantes);
                    super.insertString(offset, strCortado, attr);
                }
            }
        });
    }
}
