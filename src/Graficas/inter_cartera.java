/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graficas;

import Conexion_BD.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ramon
 */
public class inter_cartera extends javax.swing.JFrame {

    /**
     * Creates new form inter_cartera
     */
    public inter_cartera() {
        initComponents();

        setTitle("Agregar Cliente");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        setTitle("Cartera");
        this.contarEstado();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cargarCantidad = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cargarCantidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ciudad", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(cargarCantidad);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inter_cartera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inter_cartera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inter_cartera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inter_cartera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inter_cartera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cargarCantidad;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void contarEstado() {
try {
      int cantidadDeudores = 0;
    int cantidadPaz = 0;

    Connection cn = Conexion.conectar();

    // Obtener los clientes que deben dinero
    PreparedStatement consultaPaz2 = cn.prepareStatement("SELECT * FROM clientes WHERE estado = ?");
     PreparedStatement consultaClavos2 = cn.prepareStatement("SELECT * FROM clientes WHERE estado = ?");
    consultaPaz2.setInt(1, 1);
        consultaClavos2.setInt(1, 2);
    ResultSet rsClientess = consultaPaz2.executeQuery();

    ResultSet rsClientes = consultaClavos2.executeQuery();
    while (rsClientes.next()) {
        cantidadDeudores++;
    }
    // Contadores de deudores y paz
  
    // Recorrer los resultados y contar los clientes que deben dinero
    while (rsClientess.next()) {
        cantidadPaz++;

        // Obtener el ID de la categoría correspondiente
        int idCategoria = rsClientess.getInt("idcategorias");

        // Actualizar la tabla de categoría con la cantidad de deudores
        PreparedStatement consultaClavos = cn.prepareStatement("UPDATE categoria SET total_clavos = ? WHERE idcategoria = ?");
        consultaClavos.setInt(1, cantidadDeudores);
        consultaClavos.setInt(2, idCategoria);
        consultaClavos.executeUpdate();

        // Actualizar la tabla de categoría con la cantidad de paz
        PreparedStatement consultaPaz = cn.prepareStatement("UPDATE categoria SET total_paz = ? WHERE idcategoria = ?");
        consultaPaz.setInt(1, cantidadPaz);
        consultaPaz.setInt(2, idCategoria);
        consultaPaz.executeUpdate();
    }

  
  
   
    System.out.println(cantidadPaz);
        System.out.println(cantidadDeudores);

    cn.close();
} catch (SQLException e) {
    System.err.println("Error al obtener los clientes deudores: " + e);
    JOptionPane.showMessageDialog(null, "Error al obtener los clientes deudores.");
}
    }
    
    public void cargarDeudos(int estado1, JComboBox combo, JTable tabla){
    int estado = estado1;
   try {
    Connection conexion = Conexion.conectar();
    String ciudadSeleccionada = combo.getSelectedItem().toString();
    String consulta = "SELECT ciudad, total_clavos, total_paz,cartera, dinero_clavo, dinero_total "
                 + "FROM categoria";
    PreparedStatement ps = conexion.prepareStatement(consulta);
    ps.setString(1, ciudadSeleccionada);
        ps.setInt(2, estado);

    ResultSet rs = ps.executeQuery();

    // Limpiar la tabla antes de cargar los nuevos datos
    DefaultTableModel model = (DefaultTableModel) tabla.getModel();
    model.setRowCount(0);

    while (rs.next()) {
        Object[] fila = new Object[7];
        fila[0] = rs.getInt("ciudad");
        fila[1] = rs.getString("total_clavos");
        fila[2] = rs.getString("total_paz");
        fila[3] = rs.getInt("cartera");
        fila[4] = rs.getInt("dinero_clavo");
        fila[5] = rs.getInt("dinero_total");
      
        model.addRow(fila);
    }

    rs.close();
    ps.close();
    conexion.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }
}
