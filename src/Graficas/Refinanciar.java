/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graficas;

import Conexion_BD.Conexion;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author Ramon
 */
public class Refinanciar extends javax.swing.JFrame {

    int a = 0;
    String estadoCliente = null;
    Abonos_vista a1 = new Abonos_vista();

    public Refinanciar() {
        initComponents();

        datoCliente.setEnabled(false);
        datoCliente.setDisabledTextColor(Color.BLACK);
        setTitle("Refinanciar");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        clientesBox();
        a1.cargarCiudadbox(ciudad_box);
        cargarClienteBox(clientes, ciudad_box);
        a1.cargarHistorial(clientes, historia_table);
        cargarCliente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        datoCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prestamo = new javax.swing.JTextField();
        intereses = new javax.swing.JTextField();
        cuotas = new javax.swing.JTextField();
        fecha = new javax.swing.JTextField();
        valor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ciudad_box = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historia_table = new javax.swing.JTable();
        clientes = new javax.swing.JComboBox<>();
        id_cliente = new javax.swing.JTextField();
        estadoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        datoCliente.setBackground(new java.awt.Color(255, 255, 255));
        datoCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(datoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 300, 50));

        jLabel1.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("CLIENTE");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 16, -1, -1));
        jPanel1.add(prestamo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 171, 73, -1));
        jPanel1.add(intereses, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 213, 73, -1));
        jPanel1.add(cuotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 255, 73, -1));
        jPanel1.add(fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 129, 73, -1));
        jPanel1.add(valor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 297, 73, -1));

        jButton1.setText("Refinanciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, -1, -1));

        ciudad_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ciudad_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ciudad_boxActionPerformed(evt);
            }
        });
        jPanel1.add(ciudad_box, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 113, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("P.INTERES");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, -1, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("FECHA");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 129, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("CUOTAS");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, -1, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("PRESTAMO");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 171, -1, -1));

        jLabel7.setFont(new java.awt.Font("Roboto", 2, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("VALOR");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, -1, -1));

        historia_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(historia_table);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 350, 260));

        clientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        clientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientesActionPerformed(evt);
            }
        });
        jPanel1.add(clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 113, -1));

        id_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_clienteActionPerformed(evt);
            }
        });
        jPanel1.add(id_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 300, 90, -1));
        jPanel1.add(estadoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 350, 220, 90));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientesActionPerformed
        a1.cargarHistorial(clientes, historia_table);

        a = 1;
        cargarCliente();
        clientesBox();
        cargaEstado(clientes, estadoButton);
    }//GEN-LAST:event_clientesActionPerformed

    private void id_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_clienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea refinanciar?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "Refinanciacion HECHA");
            refinanciar();
        } else {

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void ciudad_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ciudad_boxActionPerformed

        cargarCliente();
        cargarClienteBox(clientes, ciudad_box);        // TODO add your handling code here:
    }//GEN-LAST:event_ciudad_boxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Refinanciar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Refinanciar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Refinanciar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Refinanciar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Refinanciar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ciudad_box;
    private javax.swing.JComboBox<String> clientes;
    private javax.swing.JTextField cuotas;
    private javax.swing.JTextField datoCliente;
    private javax.swing.JButton estadoButton;
    private javax.swing.JTextField fecha;
    private javax.swing.JTable historia_table;
    private javax.swing.JTextField id_cliente;
    private javax.swing.JTextField intereses;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField prestamo;
    private javax.swing.JTextField valor;
    // End of variables declaration//GEN-END:variables

    private void cargarCliente() {

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("SELECT estado FROM usuario WHERE 1 = 1");
            ResultSet rs = consulta.executeQuery();

            if (rs.next()) {
                estadoCliente = rs.getString("estado");
                System.out.println(estadoCliente);
                datoCliente.setText(estadoCliente);

            }

            // Cerrar el ResultSet, PreparedStatement y la conexión
            rs.close();
            consulta.close();
            cn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener el estado: " + e.getMessage());
        }

        // Utiliza la variable estadoCliente para trabajar con el valor obtenido
    }

    private void clientesBox() {

        if (clientes.getSelectedItem() == null) {
            return;
        }
        if (a == 1) {

            estadoCliente = clientes.getSelectedItem().toString();
            datoCliente.setText(estadoCliente);
        } else {

        }

        // Buscar los datos del cliente en la base de datos
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("SELECT apellido, prestamo, plazo_dias,valor_cuota,prestamo_interes FROM clientes WHERE nombre = ?");
            consulta.setString(1, estadoCliente);
            ResultSet rs = consulta.executeQuery();

            if (rs.next()) {
                // Mostrar los datos del cliente en los JTextField correspondientes

                cuotas.setText(rs.getString("plazo_dias"));
                valor.setText(rs.getString("valor_cuota"));

                prestamo.setText(rs.getString("prestamo"));
                intereses.setText(rs.getString("prestamo_interes"));
                fecha.setText(rs.getString("apellido"));

            } else {
             
            }

            cn.close();
        } catch (SQLException ex) {
            System.err.println("Error al obtener los datos del cliente: " + ex);
            JOptionPane.showMessageDialog(null, "Error al obtener los datos del cliente.");
        }
    }

    private void refinanciar() {

        try {

            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("UPDATE clientes SET apellido = ?, prestamo = ?, prestamo_interes = ?, valor_cuota = ?, plazo_dias = ?,fecha_vencimiento =?,estado=0,prestamo_restante=? WHERE nombre = ?");

            String texto = fecha.getText();
            if (texto.isEmpty()) {
                LocalDate fechaHoy = LocalDate.now();
                DateTimeFormatter formateador = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fecha2 = fechaHoy.format(formateador);
                consulta.setString(1, fecha2);

            } else {
                consulta.setString(1, fecha.getText());
            }

            consulta.setInt(2, Integer.parseInt(prestamo.getText()));
            consulta.setInt(3, Integer.parseInt(intereses.getText()));
            consulta.setDouble(4, Integer.parseInt(valor.getText()));
            consulta.setInt(5, Integer.parseInt(cuotas.getText()));
            consulta.setString(8, estadoCliente);
            consulta.setInt(7, Integer.parseInt(intereses.getText()));

            LocalDate fechaActual = LocalDate.now();
            LocalDate fechaVencimiento = fechaActual.plusDays(Integer.parseInt(cuotas.getText().trim()));
            Date fechaVencimientoSql = java.sql.Date.valueOf(fechaVencimiento);
            consulta.setDate(6, fechaVencimientoSql);
            consulta.executeUpdate();
            // Cerrar el PreparedStatement y la conexión
            consulta.close();
            cn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar los valores del cliente: " + e.getMessage());
        }

    }

    public void cargaEstado(JComboBox clientes, JButton txtes) {

        clientes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Object selected = clientes.getSelectedItem();
                if (selected != null) {
                    String[] nombreApellido = selected.toString().split(" ");
                    try {
                        Connection cn = Conexion.conectar();
                        PreparedStatement consulta = cn.prepareStatement(
                                "SELECT estado FROM clientes WHERE nombre = ?"
                        );

                        consulta.setString(1, nombreApellido[0]);

                        ResultSet rs = consulta.executeQuery();

                        if (rs.next()) {
                            int estado1 = rs.getInt("estado");
                            switch (estado1) {
                                case 0:
                                    txtes.setText("Activo");
                                    txtes.setBackground(Color.GRAY);
                                    break;
                                case 1:
                                    txtes.setText("Paz y Salvo");
                                    txtes.setBackground(Color.GREEN);
                                    break;
                                case 2:
                                    txtes.setText("Clavo");
                                    txtes.setBackground(Color.RED);
                                    break;
                                case 3:
                                    txtes.setText("Inactivo");
                                    txtes.setBackground(Color.GRAY);

                                    break;
                                default:
                                    txtes.setText("Desconocido");
                            }
                        }

                        cn.close();
                    } catch (SQLException ex) {
                        System.err.println("Error al obtener el estado del cliente: " + ex);
                        JOptionPane.showMessageDialog(null, "Error al obtener el estado del cliente.");
                    }
                }

            }

        });

    }

    public void cargarClienteBox(JComboBox<String> clientes, JComboBox<String> ciudadBox) {
        try {
            Connection cn = Conexion.conectar();

            PreparedStatement consulta = cn.prepareStatement(
                    "SELECT nombre FROM clientes WHERE idCategorias = (SELECT idcategoria FROM categoria WHERE ciudad = ? ) ORDER BY orden"
            );

            consulta.setString(1, (String) ciudadBox.getSelectedItem());
            ResultSet rs = consulta.executeQuery();

            // Obtener el cliente seleccionado actualmente
            String clienteSeleccionado = (String) clientes.getSelectedItem();

            // Limpiar el JComboBox de clientes y agregar los nuevos valores obtenidos
            clientes.removeAllItems();
            List<String> listaClientes = new ArrayList<>();
            while (rs.next()) {
                String cliente = rs.getString("nombre");
                listaClientes.add(cliente);
            }

            // Agregar los clientes al JComboBox
            for (String cliente : listaClientes) {
                clientes.addItem(cliente);
            }

            // Establecer el cliente seleccionado anteriormente si aún está en la lista
            if (listaClientes.contains(clienteSeleccionado)) {
                clientes.setSelectedItem(clienteSeleccionado);
            }

            cn.close();

            // Actualizar visualmente el JComboBox de clientes
            clientes.repaint();

            // Verificar si hay un cliente seleccionado
        } catch (SQLException e) {
            System.err.println("Error al obtener la lista de clientes: " + e);
            JOptionPane.showMessageDialog(null, "Error al obtener la lista de clientes.");
        }
    }

}
